[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dissemination using Quarto and Github Pages",
    "section": "",
    "text": "Overview\nThis book outlines how you can combine Quarto - a new version of R Markdown - with Github Pages to create an online profile and disseminate your work. You will learn about writing online books, sharing reproducible presentations, and creating websites and blogs.\nThere are alternative options to all of these outputs, but once you are comfortable with the workflow of Quarto and github, you will have a flexible toolkit to manage and share all your outputs in one place. Once you render your book/presentation/website and push any changes to github, you get a URL to share with anyone.\nFor early career researchers, a website or blog is important for people finding out about you and your work. Before you have the opportunity to publish papers, you will probably have more conference presentations. The ability to share your presentation with a URL will provide more reach than your title and abstract in a programme. For more experienced academics, you might run courses where you want to develop your own materials for your students or share your materials with your peers. An online book is great for impact and sharing your work as wide as possible.\nThe PDF version of this book was last updated on 28th March 2025.\nIntended Learning Outcomes (ILOs)\nBy the end of the workshop/book, you will be able to:\n\nUse the basic functions of git and github to commit changes and host your materials using github pages.\nCreate an online book using Quarto or the PsyTeachR booktem R package in RStudio.\nCreate reproducible presentations using Quarto to combine text, images, and code.\nCreate a simple website and/or blog using Quarto to share your profile and outputs.\nCommunicate your ideas to your target audience using features such as Markdown formatting, code chunks, referencing, glossaries, and interactive questions.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "workshop_prep.html",
    "href": "workshop_prep.html",
    "title": "1  Preparation before the workshop",
    "section": "",
    "text": "1.1 The workflow of Quarto and github pages\nFor an overview to show why you need the following the pieces of software, you will follow this workflow to create and edit your materials. Figure 1.1 shows the Quarto/github pages workflow you will follow.\nFigure 1.1: A flowchart showing the creation and editing process behind a Quarto output and sharing it using github pages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation before the workshop</span>"
    ]
  },
  {
    "objectID": "workshop_prep.html#the-workflow-of-quarto-and-github-pages",
    "href": "workshop_prep.html#the-workflow-of-quarto-and-github-pages",
    "title": "1  Preparation before the workshop",
    "section": "",
    "text": "1.1.1 Creating your output\n\nCreate a new project to produce the skeleton of your book/presentation/website.\nEdit the basic details of your book, like the title, author(s), and description.\nCreate a new github repository for your output.\nPublish the initial repository so the code is available on github.\nActivate github pages to render the book online via a URL.\n\n\n\n1.1.2 Editing your output\n\nOpen the output .Rproj file to start working on the materials in RStudio.\nEdit or add chapter files in RStudio, specifying their order in the _quarto.yml file.\nRender individual chapter/section files as you work on them. Render index.qmd when you want to update all the chapters, or render them one by one to ensure all new changes are available.\nAdd commits at key points using git/github to mark milestones with useful commit messages.\nWhen you want the book updating, push the changes to be available on github and your book URL after a short delay.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation before the workshop</span>"
    ]
  },
  {
    "objectID": "workshop_prep.html#download-r-and-rstudio",
    "href": "workshop_prep.html#download-r-and-rstudio",
    "title": "1  Preparation before the workshop",
    "section": "1.2 Download R and RStudio",
    "text": "1.2 Download R and RStudio\nIf you are new to R/RStudio, you will need to install both pieces of software which is normally pretty straightforward. You might find this YouTube video useful or the RSetGo guide we prepared for students in the School of Psychology and Neuroscience.\nIf you are a more experienced R/RStudio user, just make sure you update your version of RStudio as Posit are rapidly developing Quarto. I am currently using R version 4.4.1 (2024-06-14) and RStudio 2024.09.1+394, but the more recent the better.\n\n1.2.1 Installing Base R\nInstall base R. Choose the download link for your operating system (Linux, Mac OS X, or Windows).\nIf you have a Mac, install the latest release from the newest R-x.x.x.pkg link (or a legacy version if you have an older operating system). After you install R, you should also install XQuartz to be able to use some visualisation packages.\nIf you are installing the Windows version, choose the “base” subdirectory and click on the download link at the top of the page. After you install R, you should also install RTools and use the “recommended” version highlighted near the top of the list.\nIf you are using Linux, choose your specific operating system and follow the installation instructions. If you use Linux, you probably do not need help from me.\n\n\n1.2.2 Installing RStudio\nGo to rstudio.com and download the RStudio Desktop version for your operating system. It should recognise your operating system and allow you to download via the blue Download button, but you can look for previous versions if you need one.\n\n\n1.2.3 (optional) Install the booktem R package\nFor one version of a Quarto book, we have a specialised PsyTeachR book template for the School of Psychology and Neuroscience which you can use, but it is contained within a package hosted on Prof. Lisa DeBruine’s github called booktem. To install the package, run the following code in the Console of RStudio:\n\ndevtools::install_github(\"debruine/booktem\")\n\nIf you are new to R/RStudio, you probably have no user packages installed, so you will get a prompt to allow booktem to install the other R packages it depends on to work. This might take a few minutes, so go and enjoy yourself a hot drink.\n\n\n\n\n\n\nCaution\n\n\n\nOne of these messages might say something like “do you want to compile packages where there is a binary version” and give you several options to select. You will only be able to select 1 if you have Rtools downloaded on a Windows computer as you need developer tools to do this. Macs should not need any additional software to compile binary packages. These binary versions are normally a little more recent, so its useful to install them if possible.\n\n\nIf you are a more experienced R/RStudio user, you might be prompted to update your R packages that booktem depends on. Obviously use your judgement if you are in a place to update your packages, but the book template might not work with older packages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation before the workshop</span>"
    ]
  },
  {
    "objectID": "workshop_prep.html#github_prep",
    "href": "workshop_prep.html#github_prep",
    "title": "1  Preparation before the workshop",
    "section": "1.3 Download git and github desktop",
    "text": "1.3 Download git and github desktop\nPotentially the most unfamiliar element of this process will be working with git and github. If you have not used it before, git is a version control system which tracks file changes on your computer (like OneDrive but for code). github is an online system which uses git to host those changes and make your code available online. There is a graphical user interface called github desktop which I use and will demonstrate. If you want to use the command line version of git/github, you probably do not need me to show you how.\nThere is an installation guide on github, but we have access to a fantastic resource developed by our colleagues in Mathematics and Statistics. They developed an accessible online course on Moodle introducing staff and students to version control using git and github. You will need the enrollment code git_psych_24 to access the course. If you use it, please consider completing their feedback form on the Moodle page so they can improve the resource in future.\n\n\n\n\n\n\nWarning\n\n\n\nUnfortunately, this course is only available to students and staff within the University of Glasgow. If you are not, please use the github guidance above or another resources for learning about git and github.\n\n\nThere are 7 units in total which do not take very long, but for the purposes of this workshop, I would consider 1 and 2 as essential for downloading git/github desktop and using it as a single user to track changes. Reaching this point will be super helpful for following along in the workshop as the terms will be more familiar to you like repositories, commits, and pushing changes.\nIf you have time, completing unit 3 will give you everything you need if you are only using it on your own. If you plan on writing materials in a team, units 4 and 5 cover being a group project user, then 6 and 7 for advanced features.\n\n\n\n\n\n\nApply for education membership\n\n\n\nThe standard version of github should meet all your needs, but by working at a university you are eligible to apply for an education membership. If you are interested you can find out more on the github education site for teachers. For example, with an education profile, you can get unlimited private repositories.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation before the workshop</span>"
    ]
  },
  {
    "objectID": "workshop_prep.html#finished",
    "href": "workshop_prep.html#finished",
    "title": "1  Preparation before the workshop",
    "section": "1.4 Finished",
    "text": "1.4 Finished\nYou are ready to make your outputs in the workshop or follow along to the rest of the book here!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation before the workshop</span>"
    ]
  },
  {
    "objectID": "quarto_books.html",
    "href": "quarto_books.html",
    "title": "2  Quarto books",
    "section": "",
    "text": "2.1 Example book and Quarto documentation\nFor an example of the standard Quarto version, you can explore this very book on Dissemination using Quarto and Github Pages! If there is a feature you like, you can see the source code on github to adapt to your needs.\nYour main source of information for this output is the Creating a Book section of the Quarto guide.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "quarto_books.html#creating-a-quarto-book",
    "href": "quarto_books.html#creating-a-quarto-book",
    "title": "2  Quarto books",
    "section": "2.2 Creating a Quarto book",
    "text": "2.2 Creating a Quarto book\nIf you have not followed the preparation instructions yet, you need R/RStudio and git/github desktop installed on your computer. I will be demonstrating how to use github desktop rather than the command line, as git could easily be it’s own workshop.\nThe first step is thinking about where you want your book folder stored on your computer for where all the files will live. I have a folder within Documents called git_repos where I store all my git repositories away from OneDrive (see below).\n\n\n\n\n\n\nDo not create github repositories within OneDrive\n\n\n\nWe have not reached the github step yet, but as you think about where you want your folder for the book, please do not use a folder within OneDrive. Sometimes it works, but most of the time it causes chaos as OneDrive is trying to track changes, github is trying to track changes, which ends in them fighting over file permissions.\n\n\nOnce you have decided where your book will live, open RStudio and click File &gt; New Project... &gt; New Directory &gt; Quarto book. This will be the process we follow for all the Quarto outputs and you see there are options for a range of documents like websites and blogs.\nYou will see a new window asking for you to specify:\n\n“Directory name:” - the name of the folder it will create, so keep it short and without spaces.\n“Create a project in the subdirectory of:” - click browse to navigate to the folder you want your book to live in. Creating the book will create a new folder within this directory, so you do not need to create a folder for the book yourself.\n\nClick “Create project” and after a couple of seconds, it will open a new project window with the template in.\nCongratulations, you have a book skeleton to work with!",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "quarto_books.html#tour-of-the-quarto-book-template",
    "href": "quarto_books.html#tour-of-the-quarto-book-template",
    "title": "2  Quarto books",
    "section": "2.3 Tour of the Quarto book template",
    "text": "2.3 Tour of the Quarto book template\n\n_quarto.yml\n\nWe will start by exploring the _quarto.yml file where you can edit all the details for your book, like the title, author(s), and the licence. In Quarto books, this is also how you control the order of chapters.\n\n\n\n\n\n\nWhat is a .yml file?\n\n\n\nYAML / .yml are configuration files for programs which must follow specific formatting conventions.\n\n\nWithin the .yml file, I will highlight in the workshop key features such as: project, book, bibliography, csl, and format.\nFor presenting your book using github pages, edit the project from the standard first two lines:\n\nproject:\n  type: book\n\nTo add a new third line:\n\nproject:\n  type: book\n  output-dir: docs\n\nBe careful, indentation is important in .yml files. We do this as by default, it will create a folder called _book where the rendered .html files will live. For github pages though, it looks for a folder called docs, so this will streamline things later.\n\n\n\n\n\n\nAdd a license for your work\n\n\n\nOne important consideration is telling people how they can use your work. In the .yml, you can specify a license (see the License section of the documentation) and make this super clear in the footer of your output. I like to specify this using the following settings under website:\n\nbook:\n  license: \"CC BY-SA\"\n  page-footer: CC-BY-SA-4.0 (2025) James Bartlett\n\nI usually apply a CC-BY-SA license from Creative Commons as one of the most permissive licenses for reusing work, but they must provide attribution. You can look at the Creative Commons site for different license options.\n\n\n\nindex.qmd\n\nIndex will be the opening page for the link to your book, so this will typically include an overview of what your book contains, who to contact for problems/questions etc.\n\nChapter files\n\nBy default, you get an example index.qmd and a few other example chapters like intro.qmd, summary.qmd, and references.qmd. The example chapters demonstrate some features of Quarto but you can delete this text or create your own files to start writing chapters.\nYou will need one level 1 header (# Chapter title) to start the file, and that will be the name of your chapter at the top of the page and in the table of contents.\n\n\n\n\n\n\nWarning\n\n\n\nMake sure you only use one level 1 header per chapter. If you try and add multiple within one file, it will think they are separate chapters and try and split them when it renders, making it look weird.\n\n\nOnce you start adding multiple chapters, remember to update the .yml file for the order you want them in your book.\n\n\n\n\n\n\nTip\n\n\n\nDepending on what you want to include in your book and how complicated it becomes, you might want to separate chapters into different sections. The indentation can be frustrating, but you can add parts to the book: section of the .yml like:\n\nbook:\n  chapters:\n    - index.qmd\n    - workshop_prep.qmd\n    - part: \"Writing Books\"\n      chapters:\n        - quarto_books.qmd\n        - psyteachr_template.qmd\n\n\n\n\nreferences.bib\n\nIn the .yml, you can specify a BibTeX file (.bib) to add formatted citations and references. The template comes with an example for how a citation and its reference will look. A .bib file stored information for referencing like authors, the journal, the DOI etc. The Quarto file will take this information and present it as a citation. The Quarto features chapter explains how to use a .bib file to format citations and specify a specific citation style.\n\nRendering files\n\nOnce you have finished editing or you want to check how it looks, you need to click Render for Quarto to process the code and turn it into something pretty. Once you click Render once, you can open it up in the browser and keep checking as you make edits. When you want it to rerender, click Reload the page and it will show your new edits.\n\n\n\n\n\n\nCaution\n\n\n\nIf you introduce an error, you will get an error and red box on the screen to highlight Quarto cannot render the book. If you look in the Background Jobs tab in the console below, you should get an error message for the source of the problem if you are unsure what you did wrong.\nAfter an error, you will need to press Render again rather than just refreshing the browser.\n\n\nThese are the key components to make your book. Until this point, these edits all exist on your own computer. But now it is time to track your code using github and make your book accessible online via github pages.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "quarto_books.html#creating-a-github-repository",
    "href": "quarto_books.html#creating-a-github-repository",
    "title": "2  Quarto books",
    "section": "2.4 Creating a github repository",
    "text": "2.4 Creating a github repository\nOnce you have a working barebones version of your book ready to go, it’s time to associate your book folder with a github repository and start some version control. If you want another resource, you can see the github documentation online.\nIn future, you could actually start with this part. You can create a new repository/folder with git enabled, and then add your folder when you created a project for the book files. However, we started by creating the book first, so we need to create a repository for an existing folder without a git component. When you are used to the process, you can work out which workflow suits you better.\nIn the github desktop application, click add &gt;&gt; Create a New Repository and complete the details.\n\n\n\n\n\n\nSeriously, do not create github repositories within OneDrive\n\n\n\nAs a reminder, please do not use a folder within OneDrive for your github repository.\n\n\n\nName: This will be the name of your repository on github, so call it something short but sensible. It makes sense to call this the same as your book folder wherever possible.\nLocal path: Click Choose… and navigate to your book folder. You want the path to be the main folder your book lives in.\n\n\n\n\n\n\n\nSelect the folder, do not double click\n\n\n\nOne mistake I make every now and again is opening the folder you want to create a github repository for, rather than just selecting the folder. If you open the folder when selecting the local path, it will create a repository within your folder as a subdirectory. This means it will only apply version control to a level below your main folder and not track the files you want to track.\n\n\nThe other fields you can edit later, so click “Create Repository” when you are ready.\nYour newly minted repository should be showing as the Current Repository. This exists on your computer, but it is still not available online. You need to click Publish repository, and that will push all of your files to github and be available online.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "quarto_books.html#navigating-github-and-github-pages",
    "href": "quarto_books.html#navigating-github-and-github-pages",
    "title": "2  Quarto books",
    "section": "2.5 Navigating github and github pages",
    "text": "2.5 Navigating github and github pages\nNow your files are available online, navigate to your github account and find your new repository.\nI will provide a little overview in the workshop of key things to look out for and what each tab contains.\nIf you are only interested in using github to work on a book, the key tabs are Code and Settings. In Code, you will see all your files you published. These will all be the same as what you created on your computer. This is the idea behind version control and storing all your code/files like OneDrive.\nIn Settings, this is where you can edit things about your repository. If you plan on working on your book in a team, you can add collaborators by adding their github profile. They will then receive an email saying you have invited them to collaborate on their github repository. After they accept, they can pull the repository and start working on it too.\n\n\n\n\n\n\nWarning\n\n\n\nWorking collaboratively is one of the main motivations behind git and github, but it can be tricky if you are unfamiliar with more advanced features like merging and clashes. Before you start editing the same repository with someone, I heavily recommend completing units 4 and 5 of the version control Moodle course provided by Maths and Stats.\n\n\nClick on Settings for the next key section we need to get your book available online.\n\n2.5.1 Publish to github pages\nIn Settings, navigate to Pages within Code and automation. Under Build and deployment, this will be set to none by default. You must click the drop down, choose Main and select /docs. You will remember /docs is where we store all the html versions of the book files, so you are pointing Github pages here as the source for your book.\nWhen you press Save, this will start building your book. It will not be available immediately and will take a few minutes. When it is ready, at the top of the page, it will say “Your site is live at…” with your new URL you can click on and open. In the Actions tab, it will also show as a green tick when it has finished building.\nCongratulations! After seeing your rendered book for the first time, this is the second most satisfying part as you can see everything is working.\n\n\n\n\n\n\nAdd shortcuts to your book\n\n\n\nOnce the site is live, I recommend adding the link to two places. First, save it as a browser shortcut so you can quickly access it outside of github. Second, return to the Code tab. Click the cog icon next to Above on the right side and tick to add your website from github pages. This will show the URL to your book on the Code tab for easy access from here.\n\n\n\n\n\n\n\n\nCustomise the URL\n\n\n\nBy default, the URL to your book will be your github username + .github.io + your repository name. If you want to get fancy, you can add a custom domain from within Settings and Pages if you have bought one. That is not something we are covering in this workshop or materials though.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you try and push a change that contains an error and your book does not render, you will get a red cross in Actions saying your book did not build and you will receive an email warning you about it too. Just go back to the book files in RStudio and fix any errors you are getting before you push the updates again.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "quarto_books.html#commiting-and-pushing-changes",
    "href": "quarto_books.html#commiting-and-pushing-changes",
    "title": "2  Quarto books",
    "section": "2.6 Commiting and pushing changes",
    "text": "2.6 Commiting and pushing changes\nAt this point, you have everything you need for the book workflow. As you work on your book, you will go through the workflow of:\n\nOpen .RProj and edit your book in RStudio, either by editing your past progress or adding new files.\nWhen you hit a milestone you want to record, in github desktop tick all file changes or specific files, and add a commit message (and longer description if necessary).\nIf you are continuing to work on the book, keep editing and committing.\nWhen you are ready to push changes to github and github pages, push your commits.\n\nBefore we have time to start working on your newly minted books, I will end on a couple of warnings and tips.\n\n\n\n\n\n\nCaution\n\n\n\nRemember just committing changes will do nothing to your github repository and book link. You need to push those committed changes for them to be available on github and used to build the book in github pages. Likewise, editing the .qmd files and committing the changes to github will not change anything without first rendering your chapter/book. You edit the .qmd files but rendering creates the .html files that display as a website.\nIt takes a few minutes to rebuild, so do not worry if you do not immediately see the changes.\n\n\n\n\n\n\n\n\nReverting changes\n\n\n\nOne of the main features I use way too infrequently is reverting changes when something goes wrong. The idea behind version control is you save your work at specific milestones, where you can add commit messages that describe key changes you make. If you make a change that breaks something since your last commit, you can revert the changes to a previous version. To do this, go to github desktop, click History, and you will see all your commit history. Identify the last commit you want to revert to, right click on it, and select Revert Changes in Commit.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "quarto_books.html#start-working-on-your-own-book",
    "href": "quarto_books.html#start-working-on-your-own-book",
    "title": "2  Quarto books",
    "section": "2.7 Start working on your own book!",
    "text": "2.7 Start working on your own book!\nStart working on your own book in the remaining time we have together.\nSee the final chapter on Useful Quarto and booktem features for inspiration / example code for the kind of features you can use.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto books</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html",
    "href": "psyteachr_template.html",
    "title": "3  PsyTeachR book template",
    "section": "",
    "text": "3.1 Example books and Quarto documentation\nFor a selection of examples of the PsyTeachR book template, you can explore:\nYou can see the whole PsyTeachR suite of resources on our website.\nYour main source of information for this output is the Creating a Book section of the Quarto guide.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#example-books-and-quarto-documentation",
    "href": "psyteachr_template.html#example-books-and-quarto-documentation",
    "title": "3  PsyTeachR book template",
    "section": "",
    "text": "The Fundamentals of Quantitative Analysis book designed for MSc Psychology conversion students. If there is a feature you like, you can see the source code on github to adapt to your needs.\nThe Data Skills for Reproducible Research book designed for MSc Research Methods of Psychological Science and MSc Brain Sciences students. If there is a feature you like, you can see the source code on github to adapt to your needs.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#creating-the-book-template",
    "href": "psyteachr_template.html#creating-the-book-template",
    "title": "3  PsyTeachR book template",
    "section": "3.2 Creating the book template",
    "text": "3.2 Creating the book template\nIf you have not followed the preparation instructions yet, you need R/RStudio installed to your computer, the booktem package installed from Lisa’s github, and git/github desktop installed on your computer. I will be demonstrating how to use github desktop rather than the command line, as git could easily be it’s own workshop.\nThe first step is thinking about where you want your book folder stored on your computer, where all the files will live. I have a folder within Documents called git_repos where I store all my git repositories away from OneDrive (see below). You do not need to create a folder for the book itself as the function will do that for you, but you need somewhere for that folder to live.\n\n\n\n\n\n\nDo not create github repositories within OneDrive\n\n\n\nWe have not reached the github step yet, but as you think about where you want your folder for the book, please do not use a folder within OneDrive. Sometimes it works, but most of the time it causes chaos as OneDrive is trying to track changes, github is trying to track changes, which ends in them fighting over file permissions.\n\n\nOnce you have a folder your book can live in, open RStudio and set your working directory to this folder, for example from the top menu Session &gt;&gt; set working directory &gt;&gt; Choose directory and navigate to this folder.\nOnce RStudio knows where you want your working directory, you can create the book using the following code in the console and editing accordingly before you run the code. Do not worry though, you can edit all of these later, but this will create the initial version.\n\n# We first need to load the booktem library, assuming its installed properly\nlibrary(booktem)\n\ncreate_book(path = \"your_book_file_name\", # If you set your working directory, you should not need to add the full path\n            title = \"My book title\", # The main title of your book\n            authors = list( # You need a new line for any additional author, or delete the author 2 line if you're solo\n              c(\"Author 1 first name\", \"Author 1 last name\", \"Author 1 ORCiD\"),\n              c(\"Author 2 first name\", \"Author 2 last name\", \"Author 2 ORCiD\"))\n            )\n\nOnce you press run, you should get a bunch of progress messages from Setting up project.... Once it’s finished, your book will open in a new session and you will see the rendered version appear in your default internet browser.\nCongratulations, you have a book skeleton to work with!",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#tour-of-the-quarto-book-template",
    "href": "psyteachr_template.html#tour-of-the-quarto-book-template",
    "title": "3  PsyTeachR book template",
    "section": "3.3 Tour of the Quarto book template",
    "text": "3.3 Tour of the Quarto book template\n\n_quarto.yml\n\nWe will start by exploring the _quarto.yml file where you can edit all the details for your book, like the title, description, author(s), and the licence. In Quarto books, this is also how you control the order of chapters.\n\n\n\n\n\n\nWhat is a .yml file?\n\n\n\nYAML / .yml are configuration files for programs which must follow specific formatting conventions.\n\n\nWithin the .yml file, I will highlight key features in: project, book, bibliography, csl, and format.\n\n\n\n\n\n\nAdd a license for your work\n\n\n\nOne important consideration is telling people how they can use your work. In the .yml, you can specify a license (see the License section of the documentation) and make this super clear in the footer of your output. I like to specify this using the following settings under website:\n\nbook:\n  license: \"CC BY-SA\"\n  page-footer: CC-BY-SA-4.0 (2025) James Bartlett\n\nI usually apply a CC-BY-SA license from Creative Commons as one of the most permissive licenses for reusing work, but they must provide attribution. You can look at the Creative Commons site for different license options.\n\n\n\nindex.qmd\n\nIndex will be the opening page for the link to your book, so this will typically include an overview of what your book contains, who to contact for problems/questions etc.\n\nR/ folder\n\nThe R/ folder is where you can save bits of R code that your book relies on. There is some code in here that Lisa has worked on to help with certain functionality, like how the glossary looks.\n\ninclude/ folder\n\nThe include/ folder is a similar idea to R/. It has a bunch of files the book uses for formatting and any chapters would be able to access stuff here. For example, a .bib file for your references and a .csl file for the style of your references.\n\ndocs/ folder\n\nThe docs/ folder is where the rendered .html versions of your book will update to. The process behind creating books in Quarto is writing them in Markdown, then Markdown is converted to .html. When we add the book to github pages, this is the folder you point it to as the source for how it appears as a webpage.\n\nLicence\n\nBy default, booktem gives the books a CC-BY-SA-4.0 licence. This is a Creative Commons licence which states people can adapt your materials but they must provide you with credit. You can learn more about different types of Creative Commons licences online. If you want to state a different licence depending on your materials, you can update the text in the Licence file and in the .yml.\n\nChapter files\n\nBy default, you get an example index.qmd and one chapter .qmd for an example. The example chapter has a bunch of advice on what to edit and features like I will demonstrate, but you can delete this text or create your own files to start writing chapters.\nYou will need one level 1 header (# Chapter title) to start the file, and that will be the name of your chapter at the top of the page and in the table of contents.\n\n\n\n\n\n\nWarning\n\n\n\nMake sure you only use one level 1 header per chapter. If you try and add multiple within one file, it will think they are separate chapters and try and split them when it renders, making it look weird.\n\n\nOnce you start adding multiple chapters, remember to update the .yml file for the order you want them in your book.\n\n\n\n\n\n\nTip\n\n\n\nIf you are converting a previous book to the new template, there is a handy little function rmd2qmd. This copies .Rmd files and renames them to .qmd. The function looks like this\n\nrmd2qmd(from_path = \"\",  # file path where your .Rmd files are\n        to_path = \"\") # file path where you want your new .qmd files to go\n\nwhere you specify a file path to access the old .Rmd files and a file path to where you want the new .qmd files saving. Keep your working directory in mind as you will probably be starting from your book folder at this point. I usually save my old .Rmd files in a folder within the new book directory, then save the new .qmd files to the new book main directory.\n\n\n\nRendering files\n\nOnce you have finished editing or you want to check how it looks, you need to click Render for Quarto to process the code and turn it into something pretty. Once you click Render once, you can open it up in the browser and keep checking as you make edits. When you want it to rerender, click Reload the page and it will show your new edits.\n\n\n\n\n\n\nTip\n\n\n\nThe single best part of Quarto and the new book template is you can keep rendering and checking what your work looks like in the flesh. Previously, you had to render the whole book to check how it rendered, but now you can keep updating the browser to see what your changes look like.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nIf you introduce an error, you will get an error and red box on the screen to highlight Quarto cannot render the book. If you look in the Background Jobs tab in the console below, you should get an error message for the source of the problem if you are unsure what you did wrong.\nAfter an error, you will need to press Render again rather than just refreshing the browser.\n\n\nThese are the key components to make your book. Until this point, these edits all exist on your own computer. But now it is time to track your code using github and make your book accessible online via github pages.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#creating-a-github-repository",
    "href": "psyteachr_template.html#creating-a-github-repository",
    "title": "3  PsyTeachR book template",
    "section": "3.4 Creating a github repository",
    "text": "3.4 Creating a github repository\nOnce you have a working barebones version of your book ready to go, it’s time to associate your book folder with a github repository and start some version control. If you want another resource, you can see the github documentation online.\nIn future, you could actually start with this part. You can create a new repository/folder with git enabled, and then use create_book() function to add the book file to that repository/folder. However, we started by creating the book first, so we need to create a repository for an existing folder without a git component.\nIn the github desktop application, click add &gt;&gt; Create a New Repository and complete the details.\n\n\n\n\n\n\nSeriously, do not create github repositories within OneDrive\n\n\n\nAs a reminder, please do not use a folder within OneDrive for your github repository.\n\n\n\nName: This will be the name of your repository on github, so call it something short but sensible.\nLocal path: Click Choose… and navigate to your book folder. You want the path to be the main folder your book lives in.\n\n\n\n\n\n\n\nSelect the folder, do not double click\n\n\n\nOne mistake I make every now and again is opening the folder you want to create a github repository for, rather than just selecting the folder. If you open the folder when selecting the local path, it will create a repository within your folder as a subdirectory. This means it will only apply version control to a level below your main folder and not track the files you want to track.\n\n\nThe other fields you can edit later, so click Create Repository when you are ready.\nYour newly minted repository should be showing as the Current Repository. This exists on your computer, but it is still not available online. You need to click Publish repository, and that will push all of your files to github and be available online.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#navigating-github-and-github-pages",
    "href": "psyteachr_template.html#navigating-github-and-github-pages",
    "title": "3  PsyTeachR book template",
    "section": "3.5 Navigating github and github pages",
    "text": "3.5 Navigating github and github pages\nNow your files are available online, navigate to your github account and find your new repository.\nI will provide a little overview in the workshop of key things to look out for and what each tab contains.\nIf you are only interested in using github to work on a book, the key tabs are Code and Settings. In Code, you will see all your files you published. These will all be the same as what you created on your computer. This is the idea behind version control and storing all your code/files like OneDrive.\nIn Settings, this is where you can edit things about your repository. If you plan on working on your book in a team, you can add collaborators by adding their github profile. They will then receive an email saying you have invited them to collaborate on their github repository. After they accept, they can pull the repository and start working on it too.\n\n\n\n\n\n\nWarning\n\n\n\nWorking collaboratively is one of the main motivations behind git and github, but it can be tricky if you are unfamiliar with more advanced features like merging and clashes. Before you start editing the same repository with someone, I heavily recommend completing units 4 and 5 of the version control Moodle course provided by Maths and Stats.\n\n\nWithin Settings is the key section we need to get your book available online.\n\n3.5.1 Publish to github pages\nIn Settings, navigate to Pages within Code and automation. Under Build and deployment, this will be set to none by default. You must click the drop down, choose Main and select /docs. You will remember /docs is where we store all the html versions of the book files, so you are pointing Github pages here as the source for your book.\nWhen you press Save, this will start building your book. It will not be available immediately and will take a few minutes. When it is ready, at the top of the page, it will say “Your site is live at…” with your new URL you can click on and open. In the Actions tab, it will also show as a green tick when it has finished building.\nCongratulations! After seeing your rendered book for the first time, this is the second most satisfying part as you can see everything is working.\n\n\n\n\n\n\nAdd shortcuts to your book\n\n\n\nOnce the site is live, I recommend adding the link to two places. First, save it as a browser shortcut so you can quickly access it outside of github. Second, return to the Code tab. Click the cog icon next to Above on the right side and tick to add your website from github pages. This will show the URL to your book on the Code tab for easy access from here.\n\n\n\n\n\n\n\n\nCustomise the URL\n\n\n\nBy default, the URL to your book will be your github username + .github.io + your repository name. If you want to get fancy, you can add a custom domain from within Settings and Pages if you have bought one.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you try and push a change that contains an error and your book does not render, you will get a red cross in Actions saying your book did not build and you will receive an email warning you about it too. Just go back to the book files in RStudio and fix any errors you are getting before you push the updates again.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#commiting-and-pushing-changes",
    "href": "psyteachr_template.html#commiting-and-pushing-changes",
    "title": "3  PsyTeachR book template",
    "section": "3.6 Commiting and pushing changes",
    "text": "3.6 Commiting and pushing changes\nAt this point, you have everything you need for the book workflow. As you work on your book, you will go through the workflow of:\n\nOpen .RProj and edit your book in RStudio, either by editing your past progress or adding new files.\nWhen you hit a milestone you want to record, in github desktop tick all file changes or specific files, and add a commit message (and longer description if necessary).\nIf you are continuing to work on the book, keeping editing and committing.\nWhen you are ready to push changes to github and github pages, push your commits.\n\nBefore we have time to start working on your newly minted books, I will end on a couple of warnings and tips.\n\n\n\n\n\n\nCaution\n\n\n\nRemember just committing changes will do nothing to your github repository and book link. You need to push those committed changes for them to be available on github and used to build the book in github pages. It takes a few minutes to rebuild, so do not worry if you do not immediately see the changes.\n\n\n\n\n\n\n\n\nReverting changes\n\n\n\nOne of the main features I use way too infrequently is reverting changes when something goes wrong. The idea behind version control is you save your work at specific milestones, where you can add commit messages that describe key changes you make. If you make a change that breaks something since your last commit, you can revert the changes to a previous version. To do this, go to github desktop, click History, and you will see all your commit history. Identify the last commit you want to revert to, right click on it, and select Revert Changes in Commit.",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "psyteachr_template.html#start-working-on-your-own-book",
    "href": "psyteachr_template.html#start-working-on-your-own-book",
    "title": "3  PsyTeachR book template",
    "section": "3.7 Start working on your own book!",
    "text": "3.7 Start working on your own book!\nStart working on your own book in the remaining time we have together.\nSee the next chapter on Quarto features and book conventions for inspiration / example code for the kind of features you can use.\nDo not forget to make your own hex sticker for extra panache!",
    "crumbs": [
      "Writing Books",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PsyTeachR book template</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html",
    "href": "quarto_presentations.html",
    "title": "4  Reproducible presentations",
    "section": "",
    "text": "4.1 Example presentations and Quarto documentation\nFor an example of creating Quarto presentations, you can explore a papaja demonstration I co-presented for a previous data upskilling workshop. If there is a feature you like, you can see the source code on github to adapt to your needs.\nProf. Lisa DeBruine has a great website where she shares all her talks and you can see the underlying code in her github repository. Each folder contains all the files for one talk, so you can see the variation in how to achieve different features. Note: Lisa also adds some custom css features (styling for html pages) which we will not really be getting into in this workshop.\nYour main source of information for this output is the Revealjs section of the Quarto guide.",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html#creating-a-quarto-presentation",
    "href": "quarto_presentations.html#creating-a-quarto-presentation",
    "title": "4  Reproducible presentations",
    "section": "4.2 Creating a Quarto presentation",
    "text": "4.2 Creating a Quarto presentation\nThe first step is thinking about where you want your presentation folder stored on your computer, where all the files will live. I have a folder within Documents called git_repos where I store all my git repositories away from OneDrive (see below).\n\n\n\n\n\n\nDo not create github repositories within OneDrive\n\n\n\nWe have not reached the github step yet, but as you think about where you want your folder for the presentation, please do not use a folder within OneDrive. Sometimes it works, but most of the time it causes chaos as OneDrive is trying to track changes, github is trying to track changes, which ends in them fighting over file permissions.\n\n\nFor presentations, there are a couple of options for your starting point. Compared to books and websites in other chapters, there is not a standalone option for a presentation project to create a folder with the files inside. So, you have one of two options:\n\nYou just create a presentation by clicking File &gt; New File &gt; Quarto Presentation.... Enter a title, author, and keep the default Reveal JS option. Click Create and you will have a blank .Qmd called Untitled1.qmd. You can then create a new folder for the presentation to live in as you save Untitled1.qmd with a proper file name.\nYou first create an R Project by clicking File &gt; New Project to create a new folder/directory. This creates the folder and an R Project (.RProj) file to help organise things, then you complete step 1 to add the Quarto presentation.\n\nIf you are not including any data, it will not make much difference which way you create the presentation. However, if you want to include an element of data analysis, it can be useful to use an R Project to help organise your working directory.\nOnce you have created your presentation .qmd file, you can Render it and see a bland looking .html page with your title and author. Congratulations, you have a presentation skeleton to work with!",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html#editing-your-quarto-presentation",
    "href": "quarto_presentations.html#editing-your-quarto-presentation",
    "title": "4  Reproducible presentations",
    "section": "4.3 Editing your Quarto presentation",
    "text": "4.3 Editing your Quarto presentation\nWhen you create a presentation, I have found it can be temperamental in whether the default presentation file actually specifies it should be a presentation. So, your initial render was a very bland looking document. Edit the YAML section at the start of the file from the default title and author to add a few lines about the formatting:\n\n---\ntitle: \"Example Presentation\"\nauthor: \"James Bartlett\"\nformat:\n  revealjs:\n      embed-resources: true\n---\n\nIf you click Render again, now it will look and behave as a presentation. This is down to the format: revealjs element as revealjs is the engine for rendering slides as a .html file.\nThe embed-resources part makes the .html files slightly larger and takes longer to render but it means you can open them independently. Without this, there will be a folder in your directory called “yourtitle_files” which it needs to add the formatting. If you just shared the .html file without the files folder, it would look weird. If you set embed-resources to true, all the formatting will be contained within the .html file and you can share it as a single file.\n\n4.3.1 Adding sections and slides\nThe YAML section will control the title page but to add individual slides, you use level 1 and level 2 headers.\nA level 1 header (one hash #) will create a section and a level 2 header (two hashes ##) will create a regular title. You can just use level 2 headers to create basic slides with a title, but periodic level 1 headers can be useful for organisation to create sections which are easier to navigate in the contents menu.\n\n# This is a section\n\n## This is a slide\n\nAdd your content here.  \n\n\n\n\n\n\n\nTry this\n\n\n\nTry and switch between combinations of level 1 and level 2 headers to see how it looks when you render your presentation.\n\n\nAlternatively, if you want to create a slide without a title, you can use three dashes to start a new slide:\n\n# This is a section\n\n## This is a slide\n\nAdd your content here.  \n\n---\n\nThis is a slide without a title. \n\n\n\n4.3.2 Adding content\nOnce you have added your slides, you can add your content to them. This can include simple text, bullet points, code, and images. For the following demonstrations, if you want to play around with text to see how it looks, try using the Lorem ipsum typesetting passages:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\n4.3.2.1 Smaller text\nIt will take some practice and tweaking to learn how much you can fit on slides before you need to create a new slide. It’s probably a good hint to question how much content you are including if there is too much to fit, but you can specify smaller text with a tag on the header.\n\n## This is a slide {.smaller}\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliq...\n\n\n\n\n\n\n\nTry this\n\n\n\nTry and compare the full typesetting extract with and without the {.smaller} tag.\n\n\n\n\n4.3.2.2 Multiple columns of content\nLike the smaller text tag, there is a class of tag called .columns which you can use to specify columns and their width on the slide. For example, if we wanted two equal columns both containing text, you could add:\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliq...\n:::\n\n::: {.column width=\"50%\"}\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliq...\n:::\n\n::::\n\nWithin each column, you can include any regular content like text, bullet points, or images.\n\n\n4.3.2.3 Individual images\nIf you do not want to run code to create an image or visualisation for your presentation, you can save an image to your\nIf you want a test image, you can download this lovely picture of a duck. Save the image in your presentation folder (or a subfolder called images if there are lots you want to keep tidy) and add one of the following two options:\n\n![](Duck.png)\n\nor\n```{r}\nknitr::include_graphics(\"Duck.png\")\n```\nYou can see a longer overview of image options in the Quarto features chapter, but knitr is a package RStudio uses for dynamic documents like RMarkdown and Quarto. It includes a handy function called include_graphics() which takes a file path as it’s first argument.\nIf there are several images you want to include on a slide and you want to carefully size or position them, there are some advanced features in the reveal documentation.\n\n\n4.3.2.4 Code and output\nAs we are using Quarto within RStudio, you can add any code and output that would comfortable fit on a slide. This is a great feature if you are teaching about coding as you do not need to worry about adding screenshots of code and output. If you are presenting results from your research, it also means you can include reproducible analyses or visualisation.\nBy default, you will only see the output of code if you try and render a slide with this:\n```{r}\nsummary(mtcars)\n```\nBut you can set echo=TRUE within the code chunk after the r to also show the underlying code if that is relevant to what you are presenting.\n\n\n\n4.3.3 Changing the theme\nThe slides use a default theme without any further edits, but Quarto presentations come with a few built-in themes you can use. They are all pretty minimalist but you can explore which suit your needs best.\nTo edit the theme, you need to specify the theme in the YAML section at the start of the file, but be careful of indentation:\n\n---\ntitle: \"Example Presentation\"\nauthor: \"James Bartlett\"\nformat:\n  revealjs:\n    embed-resources: true\n    theme: dark\n---\n\n\n\n\n\n\n\nTry this\n\n\n\nThere are 11 built-in themes, so try and change it to one of the other themes such as “simple” or “moon” to see what they look like.\n\n\n\n\n\n\n\n\nHow can I make more specific edits?\n\n\n\nThe one downside to using Quarto presentations is that it is more difficult to edit basic features like the font than if you were using MS PowerPoint. If you do want a specific look to your presentation, you will need to play around with adding a .css file for styling. You can learn more about this on the Reveal Themes page.\n\n\nThese are the key components to make your presentation. Until this point, these edits all exist on your own computer. But now it is time to track your code using github and make your presentation accessible online via github pages.",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html#creating-a-github-repository",
    "href": "quarto_presentations.html#creating-a-github-repository",
    "title": "4  Reproducible presentations",
    "section": "4.4 Creating a github repository",
    "text": "4.4 Creating a github repository\nOnce you have a working barebones version of your presentation ready to go, it’s time to associate your presentation folder with a github repository and start some version control. If you want another resource, you can see the github documentation online.\nIn future, you could actually start with this part. You can create a new repository/folder with git enabled, and then add your new presentation. However, we started by creating the presentation first, so we need to create a repository for an existing folder without a git component.\nIn the github desktop application, click add &gt;&gt; Create a New Repository and complete the details.\n\n\n\n\n\n\nSeriously, do not create github repositories within OneDrive\n\n\n\nAs a reminder, please do not use a folder within OneDrive for your github repository.\n\n\n\nName: This will be the name of your repository on github, so call it something short but sensible.\nLocal path: Click Choose… and navigate to your presentation folder. You want the path to be the main folder your presentation lives in.\n\n\n\n\n\n\n\nSelect the folder, do not double click\n\n\n\nOne mistake I make every now and again is opening the folder you want to create a github repository for, rather than just selecting the folder. If you open the folder when selecting the local path, it will create a repository within your folder as a subdirectory. This means it will only apply version control to a level below your main folder and not track the files you want to track.\n\n\nThe other fields you can edit later, so click Create Repository when you are ready.\nYour newly minted repository should be showing as the Current Repository. This exists on your computer, but it is still not available online. You need to click Publish repository, and that will push all of your files to github and be available online.",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html#navigating-github-and-github-pages",
    "href": "quarto_presentations.html#navigating-github-and-github-pages",
    "title": "4  Reproducible presentations",
    "section": "4.5 Navigating github and github pages",
    "text": "4.5 Navigating github and github pages\nNow your files are available online, navigate to your github account and find your new repository. I will provide a little overview in the workshop of key things to look out for and what each tab contains.\nIf you are only interested in using github to share your presentation, the key tabs are Code and Settings. In Code, you will see all your files you published. These will all be the same as what you created on your computer. This is the idea behind version control and storing all your code/files like OneDrive.\nIn Settings, this is where you can edit things about your repository and it is the key section we need to get your presentation online.\n\n4.5.1 Publish to github pages\nIn Settings, navigate to Pages within Code and automation. Under Build and deployment, this will be set to none by default. You must click the drop down, choose Main and select /(root). This is slightly different to the book and website process in the other chapters. We do not need to point GitHub Pages to the docs/ folder as we do not have one for this output. Instead, the rendered .html file is in the main directory. This means /(root) will be looking for something within your top-level (or root) directory.\nWhen you press Save, this will start building your presentation. It will not be available immediately and will take a few minutes. When it is ready, at the top of the page, it will say “Your site is live at…” with your new URL you can click on and open. In the Actions tab, it will also show as a green tick when it has finished building.\nCongratulations! Your presentation is now available to view and share online!\n\n\n\n\n\n\nAdd shortcuts to your presentation\n\n\n\nOnce the site is live, I recommend adding the URL to the about page. Return to the Code tab. Click the cog icon next to Above on the right side and tick to add your website from github pages. This will show the URL to your presentation on the Code tab for easy access from here.\n\n\n\n\n\n\n\n\nWhy is it showing a different page as my site?\n\n\n\nAs the directory is set to the root directory, Github Pages will look for the first .html file in your directory. If that is not your presentation, it will show a different file. In some of my repositories, I have a rendered README file (explaining information about the repository and usage instructions) which shows as the “site”. However, you can still get a link to your presentation by adding the full extension such as https://bartlettje.github.io/papaja_demo/papaja_slides.html.",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html#commiting-and-pushing-changes",
    "href": "quarto_presentations.html#commiting-and-pushing-changes",
    "title": "4  Reproducible presentations",
    "section": "4.6 Commiting and pushing changes",
    "text": "4.6 Commiting and pushing changes\nAt this point, you have everything you need for the presentation workflow. As you work on your presentation, you will go through the workflow of:\n\nOpen the RProj file (if you are using a project file) and edit your presentation in RStudio.\nWhen you hit a milestone you want to record, in github desktop tick all file changes or specific files, and add a commit message (and longer description if necessary).\nIf you are continuing to work on the presentation, keeping editing and committing.\nWhen you are ready to push changes to github and github pages, push your commits.\n\nBefore we have time to start working on your presentation, I will end on a couple of warnings and tips.\n\n\n\n\n\n\nCaution\n\n\n\nRemember just committing changes will do nothing to your github repository and presentation link. You need to push those committed changes for them to be available on github and used to build the presentation in github pages. It takes a few minutes to rebuild, so do not worry if you do not immediately see the changes.\n\n\n\n\n\n\n\n\nReverting changes\n\n\n\nOne of the main features I use way too infrequently is reverting changes when something goes wrong. The idea behind version control is you save your work at specific milestones, where you can add commit messages that describe key changes you make. If you make a change that breaks something since your last commit, you can revert the changes to a previous version. To do this, go to github desktop, click History, and you will see all your commit history. Identify the last commit you want to revert to, right click on it, and select Revert Changes in Commit.",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_presentations.html#start-working-on-your-own-presentation",
    "href": "quarto_presentations.html#start-working-on-your-own-presentation",
    "title": "4  Reproducible presentations",
    "section": "4.7 Start working on your own presentation!",
    "text": "4.7 Start working on your own presentation!\nStart working on your own presentation in the remaining time we have together.\nSee the final chapter on Quarto features for inspiration / example code for the kind of features you can use.",
    "crumbs": [
      "Sharing Presentations",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible presentations</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html",
    "href": "quarto_websites.html",
    "title": "5  Websites and blogs",
    "section": "",
    "text": "5.1 Example websites and Quarto documentation\nFor an example of a Quarto website, you can explore the UK Conference on Teaching Statistics website which I helped to create and maintain. If there is a feature you like, you can see the source code on github to adapt to your needs.\nFor other examples, Solomon Kurz - a psychology researcher who writes about programming / stats - posted on BlueSky about academic websites. The thread has over 40 replies, so you can explore how other people have used Quarto or similar tools:\nYour main source of information for this output is the Creating a Website and Creating a Blog sections of the Quarto guide.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#example-websites-and-quarto-documentation",
    "href": "quarto_websites.html#example-websites-and-quarto-documentation",
    "title": "5  Websites and blogs",
    "section": "",
    "text": "Who has an academic website they’re proud of?\nI’m especially interested in websites by grad students, and in websites built with Quarto. I’ll be offering a local workshop on building a website with Quarto, and I’m keen to give my audience examples. #rstats\n\n— Solomon Kurz ((solomonkurz.bsky.social?)) 19 March 2025 at 14:27",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#creating-a-quarto-website-or-blog",
    "href": "quarto_websites.html#creating-a-quarto-website-or-blog",
    "title": "5  Websites and blogs",
    "section": "5.2 Creating a Quarto website or blog",
    "text": "5.2 Creating a Quarto website or blog\nIf you have not followed the preparation instructions yet, you need R/RStudio and git/github desktop installed on your computer. I will be demonstrating how to use github desktop rather than the command line, as git could easily be it’s own workshop.\nThe first step is thinking about where you want your website folder stored on your computer for where all the files will live. I have a folder within Documents called git_repos where I store all my git repositories away from OneDrive (see below).\n\n\n\n\n\n\nDo not create github repositories within OneDrive\n\n\n\nWe have not reached the github step yet, but as you think about where you want your folder for the website, please do not use a folder within OneDrive. Sometimes it works, but most of the time it causes chaos as OneDrive is trying to track changes, github is trying to track changes, which ends in them fighting over file permissions.\n\n\nOnce you have decided where your website will live, open RStudio and click File &gt; New Project... &gt; New Directory &gt; Quarto Website for a website, or File &gt; New Project... &gt; New Directory &gt; Quarto Blog for a blog.\nRegardless of whether you want to create a website or a blog, you will see a new window asking for you to specify:\n\n“Directory name:” - the name of the folder it will create, so keep it short and without spaces.\n“Create a project in the subdirectory of:” - click browse to navigate to the folder you want your website/blog to live in. Creating the website/blog will create a new folder within this directory, so you do not need to create a folder yourself.\n\nClick “Create project” and after a couple of seconds, it will open a new project window with the template in. Congratulations, you have a website/blog skeleton to work with!\nAlthough there is a lot of overlap between the two outputs, I have split the tour into a website section and a blog section as there are a couple of key distinctions to highlight. So, you can navigate to the one most relevant to you at this point.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#website-template",
    "href": "quarto_websites.html#website-template",
    "title": "5  Websites and blogs",
    "section": "5.3 Tour of the Quarto website template",
    "text": "5.3 Tour of the Quarto website template\n\n_quarto.yml\n\nWe will start by exploring the _quarto.yml file where you can edit all the details for your website, like the title, licence, theme, and any styling. In Quarto websites, this is also how you control the number and order of pages in the navigation bar.\n\n\n\n\n\n\nWhat is a .yml file?\n\n\n\nYAML / .yml are configuration files for programs which must follow specific formatting conventions.\n\n\nWithin the .yml file, I will highlight in the workshop key features such as: title, navbar, and format.\n\n\n\n\n\n\nAdding new pages to your website\n\n\n\nBy default, your website will have the main index and an about page in the navigation bar. To add more pages, simply create new .qmd files in the directory (including at least a title in the YAML) and specify where you want them in the .yml file.\n\n\nFor presenting your website using github pages, edit the project from the standard first two lines:\n\nproject:\n  type: website\n\nTo add a new third line:\n\nproject:\n  type: website\n  output-dir: docs\n\nBe careful, indentation is important in .yml files. We do this as by default, it will create a folder called _site where the rendered .html files will live. For Github Pages though, it looks for a folder called docs, so this will streamline things later.\n\n\n\n\n\n\nAdding Google analytics\n\n\n\nIf you want to track how many people view your website and access other kinds of analytics, you can add a Google analytics key into the .yml options.\nYou would add it into the website: section like:\n\nwebsite:\n  google-analytics: \"UA-XXXXXXXX\"\n\nThere are additional options like turning on a cookies warning if you are using this feature to tell people you are tracking user activity on your website, so I recommend reading the Quarto documentation for these features.\n\n\n\n\n\n\n\n\nAdd a license for your work\n\n\n\nOne important consideration is telling people how they can use your work. In the .yml, you can specify a license (see the License section of the documentation) and make this super clear in the footer of your output. I like to specify this using the following settings under website:\n\nwebsite:\n  license: \"CC BY-SA\"\n  page-footer: CC-BY-SA-4.0 (2025) James Bartlett\n\nI usually apply a CC-BY-SA license from Creative Commons as one of the most permissive licenses for reusing work, but they must provide attribution. You can look at the Creative Commons site for different license options.\n\n\n\nindex.qmd\n\nThe index file will be the opening page to your website, so imagine it as a kind of home page. You can edit the title which may or may not be the same as your overall website title. Everything below the YAML section will be rendered as a regular .qmd file, so think about what you want to present to people.\n\nAbout.qmd\n\nBy default, you get an about page which is meant to describe you or your website. You might include information like your social media profiles and how best to contact you.\n\n\n\n\n\n\nAdd about page formatting\n\n\n\nAs you will see in the blog section, the about page in a Quarto blog can include several default templates. Weirdly, this is not activated in the website template, but you can use the same code in the YAML section.\nThe standard about page will look like:\n\n---\ntitle: \"About\"\n---\n\nBut you can specify about as a section to add this formatting and preset link options such as github:\n\n---\ntitle: \"About\"\nabout:\n  template: jolla\n  links:\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\n\n\n\nCustom css styling\n\nThe only other file remaining in the template is styles.css. In this workshop, we are not exploring css (cascading style sheets), but this is essentially how you can customise the look of html pages. If you are not totally happy with the preset themes, you can explore how to edit the css styling on the CSS Styles Quarto documentation.\n\nRendering files\n\nOnce you have finished editing each page and you want to check how it looks, you need to click Render for Quarto to process the code and turn it into something pretty. Once you click Render, you can open it up in the browser and keep checking as you make edits.\n\n\n\n\n\n\nCaution\n\n\n\nIf you introduce an error, you will get an error and red box on the screen to highlight Quarto cannot render the book. If you look in the Background Jobs tab in the console below, you should get an error message for the source of the problem if you are unsure what you did wrong.\n\n\nThese are the key components to make your website. Until this point, these edits all exist on your own computer. But now it is time to track your code using github and make your website accessible online via github pages. Skip ahead to the creating a github repository section if you do not want to read about blogs.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#blog-template",
    "href": "quarto_websites.html#blog-template",
    "title": "5  Websites and blogs",
    "section": "5.4 Tour of the Quarto blog template",
    "text": "5.4 Tour of the Quarto blog template\n\n_quarto.yml\n\nWe will start by exploring the _quarto.yml file where you can edit all the details for your blog, like the title, author(s), and the licence. In Quarto websites, this is also how you control the number and order of pages in the navigation bar.\n\n\n\n\n\n\nWhat is a .yml file?\n\n\n\nYAML / .yml are configuration files for programs which must follow specific formatting conventions.\n\n\nWithin the .yml file, I will highlight in the workshop key features such as: title, navbar, and format.\n\n\n\n\n\n\nAdding new pages to your website\n\n\n\nBy default, your website will have the main index and an about page in the navigation bar. To add more pages, simply create new .qmd files in the directory (including at least a title in the YAML) and specify where you want them in the .yml file.\n\n\nFor presenting your blog using github pages, edit the project from the standard first two lines:\n\nproject:\n  type: website\n\nTo add a new third line:\n\nproject:\n  type: website\n  output-dir: docs\n\nBe careful, indentation is important in .yml files. We do this as by default, it will create a folder called _site where the rendered .html files will live. For github pages though, it looks for a folder called docs, so this will streamline things later.\n\n\n\n\n\n\nAdding Google analytics\n\n\n\nIf you want to track how many people view your website and access other kinds of analytics, you can add a Google analytics key into the .yml options.\nYou would add it into the website: section like:\n\nwebsite:\n  google-analytics: \"UA-XXXXXXXX\"\n\nThere are additional options like turning on a cookies warning if you are using this feature to tell people you are tracking user activity on your website, so I recommend reading the Quarto documentation for these features.\n\n\n\n\n\n\n\n\nAdd a license for your work\n\n\n\nOne important consideration is telling people how they can use your work. In the .yml, you can specify a license (see the License section of the documentation) and make this super clear in the footer of your output. I like to specify this using the following settings under website:\n\nwebsite:\n  license: \"CC BY-SA\"\n  page-footer: CC-BY-SA-4.0 (2025) James Bartlett\n\nI usually apply a CC-BY-SA license from Creative Commons as one of the most permissive licenses for reusing work, but they must provide attribution. You can look at the Creative Commons site for different license options.\n\n\n\nindex.qmd\n\nFor a blog, there is not too much to edit here. An index file will be the opening page to your blog, but it’s main function here is to display a preview of all your blog posts. Below the YAML which controls the title and listings, you can add text, code, and/or images like a normal .qmd file, but following this will be a list of blog posts in descending date order.\n\nAbout.qmd\n\nBy default, you get an about page which is meant to describe you and provide key contact information, such as your social media profiles.\nAbout pages have a special template with a few presets which you can learn about in the Quarto documentation. The default will be “jolla”, but you can change it to another template that suits your needs.\nOtherwise, anything below the initial YAML section will be formatted like a regular .qmd file for text, code, images etc.\n\nThe posts folder\n\nBy default, you get two example posts to show how they should be structured. In index.qmd, part of the YAML specified contents: posts. This means it is using the contents of the posts folder to generate the blog posts.\nIf you click on the posts folder, you will see each post lives in its own folder. To create a new post, you would create a new folder with a short but informative name. Within that folder, there is another index.qmd file and any supporting files such as images. Each post needs its own index file and the YAML at the top controls the title, author, date, and any categories. Editing these will customise the look of the post in the preview on your home page and the top of your blog post when you open it.\n\nCustom css styling\n\nThe only other file remaining in the template is styles.css. In this workshop, we are not exploring css (cascading style sheets), but this is essentially how you can customise the look of html pages. If you are not totally happy with the preset themes, you can explore how to edit the css styling on the CSS Styles Quarto documentation.\n\nRendering files\n\nOnce you have finished editing each page or post and you want to check how it looks, you need to click Render for Quarto to process the code and turn it into something pretty. Once you click Render, you can open it up in the browser and keep checking as you make edits.\n\n\n\n\n\n\nCaution\n\n\n\nIf you introduce an error, you will get an error and red box on the screen to highlight Quarto cannot render the book. If you look in the Background Jobs tab in the console below, you should get an error message for the source of the problem if you are unsure what you did wrong.\n\n\nThese are the key components to make your blog. Until this point, these edits all exist on your own computer. But now it is time to track your code using github and make your blog accessible online via github pages.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#create-github",
    "href": "quarto_websites.html#create-github",
    "title": "5  Websites and blogs",
    "section": "5.5 Creating a github repository",
    "text": "5.5 Creating a github repository\nOnce you have a working barebones version of your website ready to go, it’s time to associate your website folder with a github repository and start some version control. If you want another resource, you can see the github documentation online.\nIn future, you could actually start with this part. You can create a new repository/folder with git enabled, and then add your R Project files for your output within this folder. However, we started by creating the website first, so we need to create a repository for an existing folder without a git component.\nIn the github desktop application, click add &gt;&gt; Create a New Repository and complete the details.\n\n\n\n\n\n\nYour github username as your website URL\n\n\n\nUnless you want to buy a custom URL, the typical format for the link will be yourusername + github.io/ + your repository name. For a website or blog, you can take advantage of a feature where every profile receives one site through Github Pages. You can create a repository called yourusername + github.io (e.g., bartlettje.github.io) and this will be the URL of your site, rather than another repo appended to the end. You only get one per github account though, so it’s best to use it on a website and blog where you’re likely to only have one.\n\n\n\nName: This will be the name of your repository on github, so call it something short but sensible.\nLocal path: Click Choose… and navigate to your website folder. You want the path to be the main folder your website lives in.\n\n\n\n\n\n\n\nSelect the folder, do not double click\n\n\n\nOne mistake I make every now and again is opening the folder you want to create a github repository for, rather than just selecting the folder. If you open the folder when selecting the local path, it will create a repository within your folder as a subdirectory. This means it will only apply version control to a level below your main folder and not track the files you want to track.\n\n\nThe other fields you can edit later, so click Create Repository when you are ready.\nYour newly minted repository should be showing as the Current Repository. This exists on your computer, but it is still not available online. You need to click Publish repository, and that will push all of your files to github and be available online.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#navigating-github-and-github-pages",
    "href": "quarto_websites.html#navigating-github-and-github-pages",
    "title": "5  Websites and blogs",
    "section": "5.6 Navigating github and Github pages",
    "text": "5.6 Navigating github and Github pages\nNow your files are available online, navigate to your github account and find your new repository.\nI will provide a little overview in the workshop of key things to look out for and what each tab contains.\nIf you are only interested in using github to work on a website, the key tabs are Code and Settings. In Code, you will see all your files you published. These will all be the same as what you created on your computer. This is the idea behind version control and storing all your code/files like OneDrive.\nIn Settings, this is where you can edit things about your repository. If you plan on working on your website in a team, you can add collaborators by adding their github profile. They will then receive an email saying you have invited them to collaborate on their github repository. After they accept, they can pull the repository and start working on it too.\n\n\n\n\n\n\nWarning\n\n\n\nWorking collaboratively is one of the main motivations behind git and github, but it can be tricky if you are unfamiliar with more advanced features like merging and clashes. Before you start editing the same repository with someone, I heavily recommend completing units 4 and 5 of the version control Moodle course provided by Maths and Stats.\n\n\nWithin Settings is the key section we need to get your website available online.\n\n5.6.1 Publish to Github Pages\nIn Settings, navigate to Pages within Code and automation. Under Build and deployment, this will be set to none by default. You must click the drop down, choose Main and select /docs. You will remember /docs is where we store all the html versions of the website files, so you are pointing Github Pages here as the source for your website.\nWhen you press Save, this will start building your website. It will not be available immediately and will take a few minutes. When it is ready, at the top of the page, it will say “Your site is live at…” with your new URL you can click on and open. In the Actions tab, it will also show as a green tick when it has finished building.\nCongratulations! After seeing your rendered website for the first time, this is the second most satisfying part as you can see everything is working.\n\n\n\n\n\n\nAdd shortcuts to your book\n\n\n\nOnce the site is live, I recommend adding the link to two places. First, save it as a browser shortcut so you can quickly access it outside of github. Second, return to the Code tab. Click the cog icon next to Above on the right side and tick to add your website from github pages. This will show the URL to your website on the Code tab for easy access from here.\n\n\n\n\n\n\n\n\nCustomise the URL\n\n\n\nBy default, the URL to your website will be your github username + .github.io + your repository name. If you want to get fancy, you can add a custom domain from within Settings and Pages if you have bought one. See the github documentation for further details.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you try and push a change that contains an error and your website does not render, you will get a red cross in Actions saying your website did not build and you will receive an email warning you about it too. Just go back to the website files in RStudio and fix any errors you are getting before you push the updates again.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#commiting-and-pushing-changes",
    "href": "quarto_websites.html#commiting-and-pushing-changes",
    "title": "5  Websites and blogs",
    "section": "5.7 Commiting and pushing changes",
    "text": "5.7 Commiting and pushing changes\nAt this point, you have everything you need for the website workflow. As you work on your website, you will go through the workflow of:\n\nOpen .RProj and edit your website in RStudio, either by editing your past progress or adding new files.\nWhen you hit a milestone you want to record, in github desktop tick all file changes or specific files, and add a commit message (and longer description if necessary).\nIf you are continuing to work on the website, keep editing and committing.\nWhen you are ready to push changes to github and Github Pages, push your commits.\n\nBefore we have time to start working on your newly minted website, I will end on a couple of warnings and tips.\n\n\n\n\n\n\nCaution\n\n\n\nRemember just committing changes will do nothing to your github repository and website link. You need to push those committed changes for them to be available on github and used to build the website in github pages. Likewise, you can edit the code in your .qmd file but not render those edits into the formatted html files. It takes a few minutes to rebuild, so do not worry if you do not immediately see the changes.\n\n\n\n\n\n\n\n\nReverting changes\n\n\n\nOne of the main features I use way too infrequently is reverting changes when something goes wrong. The idea behind version control is you save your work at specific milestones, where you can add commit messages that describe key changes you make. If you make a change that breaks something since your last commit, you can revert the changes to a previous version. To do this, go to github desktop, click History, and you will see all your commit history. Identify the last commit you want to revert to, right click on it, and select Revert Changes in Commit.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_websites.html#start-working-on-your-own-website",
    "href": "quarto_websites.html#start-working-on-your-own-website",
    "title": "5  Websites and blogs",
    "section": "5.8 Start working on your own website!",
    "text": "5.8 Start working on your own website!\nStart working on your own book in the remaining time we have together.\nSee the final chapter on Quarto features and book conventions for inspiration / example code for the kind of features you can use.",
    "crumbs": [
      "Creating Websites",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Websites and blogs</span>"
    ]
  },
  {
    "objectID": "quarto_features.html",
    "href": "quarto_features.html",
    "title": "6  Useful Quarto and booktem features",
    "section": "",
    "text": "6.1 Quarto guide\nTo check different features of Quarto, you can see an extensive user guide online.",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#markdown",
    "href": "quarto_features.html#markdown",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.2 Markdown",
    "text": "6.2 Markdown\nQuarto still uses Markdown for formatting, so you can see this part of the Quarto guide for Markdown Basics.\n\n6.2.1 Headers\nThe table of contents in Quarto outputs goes by default to level 3 headers (but you can go to level 6 headers if you really want), so keep in mind what will be a logical nesting of headers, sub-headers etc. You add a hash for each level of header:\n\n# Level 1 header\n\n## Level 2 header\n\n### Level 3 header\n\n\n\n6.2.2 Text formatting\nYou make text italics by surrounding it with one star (*italics*), or bold by surrounding it with two stars (**bold**).\nIf you want to give text code formatting, you can add back ticks around it.\n\n`example code`\n\nproduces:\nexample code.\nIf you want to add bullet points, you can use - or *:\n\n- Bullet point 1\n\n- Bullet point 2\n\n- Bullet point 3\n\n\nBullet point 1\nBullet point 2\nBullet point 3\n\nThe same applies to numbered lists:\n\n1. List 1\n\n2. List 2\n\n3. List 3\n\n\nList 1\nList 2\nList 3\n\nOr even sub-lists with a little indent:\n\n1. List 1\n\n    1. Sublist 1\n    \n    2. Sublist 2\n\n2. List 2\n\n\nList 1\n\nSublist 1\nSublist 2\n\nList 2\n\n\n\n6.2.3 Links\nYou can add hyperlinks with the form:\n\n[hyperlinks](https://quarto.org/docs/authoring/markdown-basics.html#links-images)\n\nwhere the writing in square brackets is the text, and the link goes in the round brackets. By default, these link within the current page which I find infuriating. So, you can add a little html code to open a new tab with the link:\n\n[hyperlinks](https://quarto.org/docs/authoring/markdown-basics.html#links-images){target=\"_blank\"}\n\n\n\n6.2.4 Internal hyperlinks\nIf you want to reference a chapter or section of your book, you can create internal hyperlinks through curly brackets and a hash. For example, if I wanted to point you back to the workshop preparation chapter, you first need to add a tag on the chapter heading:\n\n# Preparation before the workshop {#workshop_prep}\n\nYou can then use the tag to create a link with a similar format to URL hyperlinks:\n\n...back to the [workshop preparation](#workshop_prep) chapter\n\n\n\n6.2.5 Images\nThere are different ways to add images, where the Markdown version uses a similar format to links which I will demonstrate through this duck:\n\n![This is a duck.](images/Duck.png)\n\n\n\n\nThis is a duck. If Helena is reading this, yes it has a creative commons licence.\n\n\nThere are some cool new Quarto features making it easy to combine multiple images. For example, we can add two ducks and specify we want them in two columns.\n\n::: {#fig-duck layout-ncol=2}\n![](images/images/Duck.png)\n![](images/images/Duck.png)\nDuck 1 (left) and Duck 2 (right). \n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.1: Duck 1 (left) and Duck 2 (right).\n\n\n\nYou can also reference figures to add little hyperlinks and automatically number them. The title after the hash must start with fig to be registered as a figure, and you can also add tbl to number tables separately.\nFigure 6.1 showed two ducks side by side. You do not even need to type Figure: @fig-duck.\nYou can also use knitr to add figures, and using code chunks has some new handy features using tags. They work in a similar way to code options, but make it easier to add longer captions etc, as shown in Figure 6.2.\n```{r}\n#| label: fig-img-duck\n#| fig.cap: \"This is a longer caption about our beloved duck.\"\n#| fig-alt: \"You can also add alt text to images.\"\n\nknitr::include_graphics(\"images/Duck.png\")\n```\n\n\n\n\n\n\n\n\nFigure 6.2: This is a longer caption about our beloved duck.",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#code-chunks",
    "href": "quarto_features.html#code-chunks",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.3 Code chunks",
    "text": "6.3 Code chunks\nIf you are making a book or website to show code, there are a couple of features that might be useful.\nAdding code chunks will by default show both the code and output:\n```{r}\nrnorm(n = 5, mean = 10, sd = 2)\n```\n\nrnorm(n = 5, mean = 10, sd = 2)\n\n[1] 11.97701 13.69839 11.63416  8.68499 10.60830\n\n\nThere are several features you can edit by adding different options. For example, if you do not want to show the code, you can set echo=FALSE after the r {r echo=FALSE}:\n\n\n[1]  4.498800 10.874532  9.329221  9.988736  9.226640\n\n\nIf you want to demonstrate code but not execute it - such as to demonstrate inaccurate code, you can set eval=FALSE after the r {r eval=FALSE}:\n\nrnorm(n = 5, mean = 10, sd = 2)",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#callout-blocks",
    "href": "quarto_features.html#callout-blocks",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.4 Callout blocks",
    "text": "6.4 Callout blocks\nMy personal favourite features, you can highlight content with callout blocks. These range from notes that people might find interesting, to warnings that something could go mortally wrong.\n\n::: {.callout-note}\nThese are notes.\n:::\n\n\n\n\n\n\n\nNote\n\n\n\nThese are notes.\n\n\nYou can change the title by using hashes within the callout. They count as real headers in the Quarto outline. So, if you use one hash, it looks like a level one header which deeply disturbs me, so I like to use four hashes to make more sense in the chapter structure.\n\n::: {.callout-note}\n#### Look at my interesting title\nThese are notes.\n:::\n\n\n\n\n\n\n\nLook at my interesting title\n\n\n\nThese are notes.\n\n\nYou can also make the box collapse by default, which can be handy to hide solutions or obscure tangents.\n\n::: {.callout-note collapse=true}\n#### Please look at me\nSecret secret notes. \n:::\n\n\n\n\n\n\n\nPlease look at me\n\n\n\n\n\nSecret secret notes.\n\n\n\nOther types of callout blocks include:\n\nWarning\n\n\n::: {.callout-warning}\nThese are warnings.\n:::\n\n\n\n\n\n\n\nWarning\n\n\n\nThese are warnings.\n\n\n\nImportant\n\n\n::: {.callout-important}\nThis is something important.\n:::\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is something important.\n\n\n\nTip\n\n\n::: {.callout-tip}\nHere is a handy tip. \n:::\n\n\n\n\n\n\n\nTip\n\n\n\nHere is a handy tip.\n\n\n\nAnd, a caution\n\n\n::: {.callout-caution}\nHere is a caution about something.\n:::\n\n\n\n\n\n\n\nCaution\n\n\n\nHere is a caution about something.",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#embedding-posts-or-videos",
    "href": "quarto_features.html#embedding-posts-or-videos",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.5 Embedding posts or videos",
    "text": "6.5 Embedding posts or videos\nWhen you write in Markdown language, it renders to a .html page. This means you can add html code directly into your .qmd files and it will render in the final .html page. If you want to embed posts from social media, you can copy the embed post code from something like BlueSky (click the three dots … below a post and select embed post):\n\n&lt;blockquote class=\"bluesky-embed\" data-bluesky-uri=\"at://did:plc:lrgnqp3xjombwh5sairhzou3/app.bsky.feed.post/3lao2hdzo622w\" data-bluesky-cid=\"bafyreibzugbnx5b6i33f6bzp5phavf5z66jwcccpv5ztfmf3ojnfhyybra\" data-bluesky-embed-color-mode=\"system\"&gt;&lt;p lang=\"en\"&gt;A little delayed but Wil Toivo and I finally have a complete rewrite of our Fundamentals of Quantitative Analysis book 📖 psyteachr.github.io/quant-fun-v3/\n\nThis is our data skills book for MSc conversion students, so they must rapidly get up to speed and complete chapters 1-11 in semester 1.&lt;br&gt;&lt;br&gt;&lt;a href=\"https://bsky.app/profile/did:plc:lrgnqp3xjombwh5sairhzou3/post/3lao2hdzo622w?ref_src=embed\"&gt;[image or embed]&lt;/a&gt;&lt;/p&gt;&mdash; James Bartlett (&lt;a href=\"https://bsky.app/profile/did:plc:lrgnqp3xjombwh5sairhzou3?ref_src=embed\"&gt;@bartlettje.bsky.social&lt;/a&gt;) &lt;a href=\"https://bsky.app/profile/did:plc:lrgnqp3xjombwh5sairhzou3/post/3lao2hdzo622w?ref_src=embed\"&gt;11 November 2024 at 09:55&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=\"https://embed.bsky.app/static/embed.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\nWhich will produce the following:\n\n\nA little delayed but Wil Toivo and I finally have a complete rewrite of our Fundamentals of Quantitative Analysis book 📖 psyteachr.github.io/quant-fun-v3/\nThis is our data skills book for MSc conversion students, so they must rapidly get up to speed and complete chapters 1-11 in semester 1.[image or embed]\n\n— James Bartlett ((bartlettje.bsky.social?)) 11 November 2024 at 09:55\n\n\nThis also works for embedding something like a YouTube video where you can click Share &gt; Embed from under a video, and paste the code into your .qmd file.",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#equations-using-latex",
    "href": "quarto_features.html#equations-using-latex",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.6 Equations using LaTeX",
    "text": "6.6 Equations using LaTeX\nFor books, one useful feature might be the support of LaTeX equations if mathematics or statistics is a key component of your material. For example, you can add simple or complex equations within two dollar symbols:\n\n$$\nE = MC^2\n$$\n\nAnd it will produce the following:\n\\[\nE = MC^2\n\\]",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#references",
    "href": "quarto_features.html#references",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.7 References",
    "text": "6.7 References\nIf you want to add proper references instead of just hyperlinks, you need a .bib file from a reference manager.\nThe .bib file should be in the include folder (unless you point it somewhere else) and you can specify it in the _quarto.yml file through the bibliography entry:\n\nbibliography: include/references.bib\n\n\n\n\n\n\n\nHow do I download and edit a .bib file?\n\n\n\nI use Zotero as a reference manager and its super easy to download a .bib file for a project you are working on. Downloading one entry is a little annoying as you need to export it as BibTex and copy from the file it produces, but if you create a folder to store everything for the book, you can just export the folder each time you add new entries (right click &gt;&gt; export collection &gt;&gt; BibTex format and OK).\nIf you do have the single entry, you can open the .bib file within RStudio and copy the entry in. It will look something like this:\n\n@article{bartlett_power_2022,\n    title = {Power to the {People}: {A} {Beginner}’s {Tutorial} to {Power} {Analysis} using jamovi},\n    volume = {6}\n    ...}\n\nwhich stores all the information for the .csl to pull out and cite/reference as needed.\n\n\nTo cite, you need the code at the start of the bib entry. For example, @bartlett_power_2022 produces Bartlett & Charles (2022) and the full reference will be added to the references chapter.\nDepending on the citation style you want, there are different codes, such as adding it in parentheses [@bartlett_power_2022] (Bartlett & Charles, 2022). For a full list of options, you can check out the Quarto citation guide.\nBy default, the book template has APA style for referencing, but if you need a different referencing style, you can add and specify a different .csl file within _quarto.yml.\n\ncsl: include/apa.csl\n\n\n\n\n\n\n\nHow do I specify a .csl file?\n\n\n\n.csl stands for citation style language and you can download one from the Zotero style repository. For example, you could search for vancouver, click on the link, and it will download a new .csl file you can add to your repository within include/.",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#webexercises-interactive-questions",
    "href": "quarto_features.html#webexercises-interactive-questions",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.8 webexercises interactive questions",
    "text": "6.8 webexercises interactive questions\nThe PsyTeachR booktem automatically includes the webexercises package which can add interactive questions for self-tests. This is great for students checking their understanding through MCQs or adding easy to check answers like numbers.\n\n6.8.1 MCQs\nYou can add questions through inline code, or by first specifying them in an R code block if it makes it easier to edit longer text.\nFor example, this workshop is:\n\n Life changing Boring Mediocre OK\n\n\n`r longmcq(c(answer = \"Life changing\", \"Boring\", \"Mediocre\", \"OK\"))` \n\n\n\n6.8.2 Single answer\nYou can ask simple single answers that are easy to evaluate:\n\nOn a scale of 1 (very dissatisfied) - 7 (very satisfied), how pleased are you with this workshop? \n\n\n`r fitb(7)`\n\n\n\n6.8.3 True or false\nIf you want an even simpler response, you can ask true or false.\n\nAfter the workshop, I am going to make my own book: TRUEFALSE\n\n\n`r torf(TRUE)`",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#embedding-files-to-download",
    "href": "quarto_features.html#embedding-files-to-download",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.9 Embedding files to download",
    "text": "6.9 Embedding files to download\nUsing a similar format to creating hyperlinks, you can embed files for people to download and use in the chapter. This can be really useful for student activities as you can give them a data set to follow along to your tutorials with.\nFirst, you need to add a file within your book directory. If you have loads of data or files across your book, you might want a separate folder (I call mine data or supporting), but I have put a simple .csv in the include/ folder.\nIf you click on .csv file, it will download to your browser or people might need to right click and “save link as”. It follows the same format as hyperlinks:\n\nclick on [.csv file](include/test_data.csv)",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "quarto_features.html#adding-a-glossary",
    "href": "quarto_features.html#adding-a-glossary",
    "title": "6  Useful Quarto and booktem features",
    "section": "6.10 Adding a glossary",
    "text": "6.10 Adding a glossary\nAnother cool feature that Lisa DeBruine created is adding a glossary of terms. glossary is its own R package, but by default booktem includes it. You have two options, you can either add your own definitions as you go along, or if you are teaching data skills, you can use the PsyTeachR glossary.\n\n\n\n\n\n\nImportant\n\n\n\nYou still need to add definitions for anything that is not included in the PsyTeachR glossary. If you try and render and the item does not exist, you will get an error and you will need to manually add the definition within the inline code.\n\n\nThere are two main components to creating a glossary. First, you need to add glossary items as you work through your chapter using inline code. For example, I might want to define what a glossaryAn alphabetical list of words with explanations. is:\n\n`r glossary(\"glossary\", def = \"An alphabetical list of words with explanations.\")`\n\nIf you hover or click on the text, you will see the definition appear. There are different settings for this, so make sure you check the glossary documentation.\nAt the end of each chapter, you can then include a glossary table which shows all the words you used in the chapter. Just make sure you add echo=FALSE to the code chunk, so that the function does not appear.\n```{r}\nglossary_table()\n```\nThis produces:\n\n\n\n\n\nterm\ndefinition\n\n\n\n\nglossary\nAn alphabetical list of words with explanations.\n\n\n\n\n\n\n\nThe behaviour of glossary table and whether you use all your own definitions or point to the PsyTeachR glossary is controlled by some R code in the booktem files. It will be easier to point out in the workshop, but you are looking for R/my_setup.R.\nYou can add definitions as you go along with inline code, or you can create and edit a .yml file for your terms if you would prefer to edit that way. See the glossary documentation for more information.\n\n\n\n\nBartlett, J., & Charles, S. (2022). Power to the People: A Beginner’s Tutorial to Power Analysis using jamovi. Meta-Psychology, 6. https://doi.org/10.15626/MP.2021.3078",
    "crumbs": [
      "General Quarto Resources",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Useful Quarto and booktem features</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bartlett, J., & Charles, S. (2022). Power to the\nPeople: A Beginner’s\nTutorial to Power Analysis using\njamovi. Meta-Psychology, 6. https://doi.org/10.15626/MP.2021.3078",
    "crumbs": [
      "References"
    ]
  }
]