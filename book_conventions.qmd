# Worked examples for Quarto and booktem features {#quarto_features}

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(webexercises)
library(glossary)
```

As you work on your own book, you might find the following features useful for inspiration.

## Quarto guide

To check different features of Quarto, you can see an [extensive user guide](https://quarto.org/docs/guide/){target="_blank"} online.

## Worked examples

If you look through these books for inspiration, you can check the code to see how they do it.

Dr Wil Toivo and I are rewriting the [Fundamentals of Quantitative Analysis](https://bartlettje.github.io/quant-fun-v3/){target="_blank"} book and you can see our [github repository](https://github.com/BartlettJE/quant-fun-v3){target="_blank"}.

You can also see the [Applied Data Skills](https://psyteachr.github.io/ads-v3/){target="_blank"} book developed by Dr Emily Nordmann and Prof Lisa DeBruine, along with their [github repository](https://github.com/PsyTeachR/ads-v3){target="_blank"}.

## Useful features

### Markdown

Quarto still uses Markdown for formatting, so you can see this part of the [Quarto guide for Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html){target="_blank"}.

#### Headers

The book template table of contents goes by default to level 3 headers (but you can go to level 6 headers if you *really* want), so keep in mind what will be a logical nesting of headers, sub-headers etc. You add a hash for each level of header:

```{r}
# Level 1 header

## Level 2 header

### Level 3 header
```

#### Text formatting

You make text *italics* by surrounding it with one star (`*italics*`), or **bold** by surrounding it with two stars (`**bold**`).

If you want to give text code formatting, you can add back ticks around it.

```{r eval=FALSE}
`example code`
```

produces:

`example code`.

If you want to add bullet points, you can use `-` or `*`:

```{r eval=FALSE}
- Bullet point 1

- Bullet point 2

- Bullet point 3
```

-   Bullet point 1

-   Bullet point 2

-   Bullet point 3

The same applies to numbered lists:

```{r eval=FALSE}
1. List 1

2. List 2

3. List 3
```

1.  List 1

2.  List 2

3.  List 3

Or even sub-lists with a little indent:

```{r eval=FALSE}
1. List 1

    1. Sublist 1
    
    2. Sublist 2

2. List 2
```

1.  List 1

    1.  Sublist 1

    2.  Sublist 2

2.  List 2

#### Links

You can add [hyperlinks](https://quarto.org/docs/authoring/markdown-basics.html#links-images){target="_blank"} with the form:

```{r eval=FALSE}
[hyperlinks](https://quarto.org/docs/authoring/markdown-basics.html#links-images)
```

where the writing in square brackets is the text, and the link goes in the round brackets. By default, these link within the current page which I find infuriating. So, you can add a little html code to open a new tab with the link:

```{r eval=FALSE}
[hyperlinks](https://quarto.org/docs/authoring/markdown-basics.html#links-images){target="_blank"}
```

#### Internal hyperlinks

If you want to reference a chapter or section of your book, you can create internal hyperlinks through curly brackets and a hash. For example, if I wanted to point you back to the [Workshop Plan](#workshop_plan) chapter, you first need to add a tag on the chapter heading:

```{r eval=FALSE}
# Workshop plan {#workshop_plan}
```

You can then use the tag to create a link with a similar format to URL hyperlinks:

```{r eval=FALSE}
...back to the [Workshop Plan](#workshop_plan) chapter
```

#### Images

There are different ways to add images, where the Markdown version uses a similar format to links which I will demonstrate through this duck:

```{r eval=FALSE}
![This is a duck.](images/Duck.png)
```

![This is a duck. If Helena is reading this, yes it has a creative commons licence.](images/Duck.png)

There are some cool new Quarto features making it easy to combine multiple images. For example, we can add two ducks and specify we want them in two columns.

```{r eval=FALSE}
::: {#fig-duck layout-ncol=2}
![](images/images/Duck.png)
![](images/images/Duck.png)
Duck 1 (left) and Duck 2 (right). 
:::
```

::: {#fig-duck layout-ncol="2"}
![](images/Duck.png)

![](images/Duck.png)

Duck 1 (left) and Duck 2 (right).
:::

You can also reference figures to add little hyperlinks and automatically number them. The title after the hash must start with `fig` to be registered as a figure, and you can also add `tbl` to number tables separately.

@fig-duck showed two ducks side by side. You do not even need to type Figure: `@fig-duck`.

You can also use `knitr` to add figures, and using code chunks has some new handy features using tags. They work in a similar way to code options, but make it easier to add longer captions etc, as shown in @fig-img-duck.

```{{r}}
#| label: fig-img-duck
#| fig.cap: "This is a longer caption about our beloved duck."
#| fig-alt: "You can also add alt text to images."

knitr::include_graphics("images/Duck.png")
```

```{r img-duck, echo=FALSE}
#| label: fig-img-duck
#| fig.cap: "This is a longer caption about our beloved duck."
#| fig-alt: "You can also add alt text to images."

knitr::include_graphics("images/Duck.png")
```

### Code chunks

If you are making a book to show code, there are a couple of features that might be useful.

Adding code chunks will by default show both the code and output:

```{{r}}
rnorm(n = 5, mean = 10, sd = 2)
```

```{r}
rnorm(n = 5, mean = 10, sd = 2)
```

There are several features you can edit by adding different options. For example, if you do not want to show the code, you can set `echo=FALSE` after the r `{r echo=FALSE}`:

```{r echo=FALSE}
rnorm(n = 5, mean = 10, sd = 2)
```

If you want to demonstrate code but not execute it - such as to demonstrate inaccurate code, you can set `eval=FALSE` after the r `{r eval=FALSE}`:

```{r eval=FALSE}
rnorm(n = 5, mean = 10, sd = 2)
```

### Callout blocks

My personal favourite features, you can highlight content with callout blocks. These range from notes that people might find interesting, to warnings that something could go mortally wrong.

```{r eval=FALSE}
::: {.callout-note}
These are notes.
:::
```

::: callout-note
These are notes.
:::

You can change the title by using hashes within the callout. They count as real headers in the Quarto outline. So, if you use one hash, it looks like a level one header which deeply disturbs me, so I like to use four hashes to make more sense in the chapter structure.

```{r eval=FALSE}
::: {.callout-note}
#### Look at my interesting title
These are notes.
:::
```

::: callout-note
#### Look at my interesting title

These are notes.
:::

You can also make the box collapse by default, which can be handy to hide solutions or obscure tangents.

```{r eval=FALSE}
::: {.callout-note collapse=true}
#### Please look at me
Secret secret notes. 
:::
```

::: {.callout-note collapse="true"}
#### Please look at me

Secret secret notes.
:::

Other types of callout blocks include:

-   Warning

```{r eval=FALSE}
::: {.callout-warning}
These are notes.
:::
```

::: callout-warning
These are warnings.
:::

-   Important

```{r eval=FALSE}
::: {.callout-important}
This is something important
:::
```

::: callout-important
This is something important
:::

-   Tip

```{r eval=FALSE}
::: {.callout-tip}
Here is a handy tip. 
:::
```

::: callout-tip
Here is a handy tip.
:::

-   And, a caution

```{r eval=FALSE}
::: {.callout-caution}
Here is a caution about something.
:::
```

::: callout-caution
Here is a caution about something.
:::

### References

If you want to add proper references instead of just hyperlinks, you need a .bib file from a reference manager.

The .bib file should be in the include folder (unless you point it somewhere else) and you can specify it in the `_quarto.yml` file through the bibliography entry:

```{r eval=FALSE}
bibliography: include/references.bib
```

::: callout-tip
#### How do I download and edit a .bib file?

I use Zotero as a reference manager and its super easy to download a .bib file for a project you are working on. Downloading one entry is a little annoying as you need to export it as BibTex and copy from the file it produces, but if you create a folder to store everything for the book, you can just export the folder each time you add new entries (`right click >> export collection >> BibTex format and OK`).

If you do have the single entry, you can open the .bib file within RStudio and copy the entry in. It will look something like this:

```{r eval=FALSE}
@article{bartlett_power_2022,
	title = {Power to the {People}: {A} {Beginner}â€™s {Tutorial} to {Power} {Analysis} using jamovi},
	volume = {6}
	...}
```

which stores all the information for the `.csl` to pull out and cite/reference as needed.
:::

To cite, you need the code at the start of the bib entry. For example, `@bartlett_power_2022` produces @bartlett_power_2022 and the full reference will be added to the references chapter.

Depending on the citation style you want, there are different codes, such as adding it in parentheses `[@bartlett_power_2022]` [@bartlett_power_2022]. For a full list of options, you can check out the [Quarto citation guide](https://quarto.org/docs/authoring/citations.html){target="_blank"}.

By default, the book template has APA style for referencing, but if you need a different referencing style, you can add and specify a different .csl file.

```{r eval=FALSE}
csl: include/apa.csl
```

::: callout-tip
#### How do I specify a .csl file?

`.csl` stands for citation style language and you can download one from the [Zotero style repository](https://www.zotero.org/styles){target="_blank"}. For example, you could search for vancouver, click on the link, and it will download a new .csl file you can add to your repository.
:::

### `webexercises` interactive questions

The book template automatically includes the `webexercises` package which can add interactive questions for self-tests. This is great for students checking their understanding through MCQs or adding easy to check answers like numbers.

#### MCQs

You can add questions through inline code, or by first specifying them in an R code block if it makes it easier to edit longer text.

For example, this workshop is:

`r longmcq(c(answer = "Life changing", "Boring", "Mediocre", "OK"))`

```{r eval=FALSE}
`r longmcq(c(answer = "Life changing", "Boring", "Mediocre", "OK"))` 
```

#### Single answer

You can ask simple single answers that are easy to evaluate:

-   On a scale of 1 (very dissatisfied) - 7 (very satisfied), how pleased are you with this workshop? `r fitb(7)`

```{r eval=FALSE}
`r fitb(7)`
```

#### True or false

If you want an even simpler response, you can ask true or false.

-   After the workshop, I am going to make my own book: `r torf(TRUE)`

```{r eval=FALSE}
`r torf(TRUE)`
```

### Embedding files to download

Using a similar format to creating hyperlinks, you can embed files for people to download and use in the chapter. This can be really useful for student activities as you can give them a data set to follow along to your tutorials with.

First, you need to add a file within your book directory. If you have loads of data or files across your book, you might want a separate folder (I call mine `data` or `supporting`), but I have put a simple .csv in the `include/` folder.

If you click on [.csv file](include/test_data.csv){target="_blank"}, it will download to your browser or people might need to right click and "save link as". It follows the same format as hyperlinks:

```{r eval=FALSE}
click on [.csv file](include/test_data.csv)
```

### Adding a glossary

Another cool feature that Lisa created is adding a glossary of terms. `glossary` is its own R package, but by default `booktem` includes it. You have two options, you can either add your own definitions as you go along, or if you are teaching data skills, you can use the [PsyTeachR glossary](https://psyteachr.github.io/glossary/){target="_blank"}.

::: callout-important
You still need to add definitions for anything that is not included in the PsyTeachR glossary. If you try and render and the item does not exist, you will get an error and you will need to manually add the definition within the inline code.
:::

There are two main components to creating a glossary. First, you need to add glossary items as you work through your chapter using inline code. For example, I might want to define what a `r glossary("glossary", def = "An alphabetical list of words with explanations.")` is:

```{r eval=FALSE}
`r glossary("glossary", def = "An alphabetical list of words with explanations.")`
```

If you hover or cover on the text, you will see the definition appear. There are different settings for this, so make sure you check the `glossary` documentation.

At the end of each chapter, you can then include a glossary table which shows all the words you used in the chapter. Just make sure you add `echo=FALSE` to the code chunk, so that the function does not appear.

```{{r}}
glossary_table()
```

```{r, echo=FALSE}
glossary_table()
```

The behaviour of glossary table and whether you use all your own definitions or point to the PsyTeachR glossary is controlled by some R code in the `booktem` files. It will be easier to point out in the workshop, but you are looking for `R/my_setup.R`.

You can add definitions as you go along with inline code, or you can create and edit a .yml file for your terms if you would prefer to edit that way. See the [glossary documentation](https://debruine.github.io/glossary/articles/glossary.html){target="_blank"} for more information.
